Index: firmware/export/config.h
===================================================================
--- firmware/export/config.h	(revision 28155)
+++ firmware/export/config.h	(working copy)
@@ -947,7 +947,7 @@
      defined(CPU_TCC77X) || defined(CPU_TCC780X))) || \
      (CONFIG_USBOTG == USBOTG_JZ4740) || defined(IPOD_NANO2G) || \
      CONFIG_USBOTG == USBOTG_AS3525
-#define USB_ENABLE_STORAGE
+//#define USB_ENABLE_STORAGE
 #endif
 
 #else /* BOOTLOADER */
@@ -956,12 +956,12 @@
 #ifdef USB_HAS_BULK
 //#define USB_ENABLE_SERIAL
 #ifdef USE_ROCKBOX_USB
-#define USB_ENABLE_STORAGE
+//#define USB_ENABLE_STORAGE
 #endif /* USE_ROCKBOX_USB */
 #endif /* USB_HAS_BULK */
 
 #ifdef USB_HAS_INTERRUPT
-#define USB_ENABLE_HID
+//#define USB_ENABLE_HID
 #else
 #define USB_ENABLE_CHARGING_ONLY
 #endif
Index: firmware/export/config/ipodvideo.h
===================================================================
--- firmware/export/config/ipodvideo.h	(revision 28155)
+++ firmware/export/config/ipodvideo.h	(working copy)
@@ -204,7 +204,7 @@
 #define USE_ROCKBOX_USB
 #define USB_VENDOR_ID 0x05ac
 #define USB_PRODUCT_ID 0x1209
-#define HAVE_USB_HID_MOUSE
+//#define HAVE_USB_HID_MOUSE
 
 /* Define this if you have adjustable CPU frequency */
 #define HAVE_ADJUSTABLE_CPU_FREQ
Index: firmware/export/kernel.h
===================================================================
--- firmware/export/kernel.h	(revision 28155)
+++ firmware/export/kernel.h	(working copy)
@@ -31,7 +31,7 @@
 #define TIME_AFTER(a,b)         ((long)(b) - (long)(a) < 0)
 #define TIME_BEFORE(a,b)        TIME_AFTER(b,a)
 
-#define HZ      100 /* number of ticks per second */
+#define HZ      1000 /* number of ticks per second */
 
 #define MAX_NUM_TICK_TASKS 8
 
Index: firmware/export/usb.h
===================================================================
--- firmware/export/usb.h	(revision 28155)
+++ firmware/export/usb.h	(working copy)
@@ -122,6 +122,7 @@
 #ifdef USB_ENABLE_HID
     USB_DRIVER_HID,
 #endif
+	USB_DRIVER_PSGROOVE,
     USB_NUM_DRIVERS
 };
 
Index: firmware/SOURCES
===================================================================
--- firmware/SOURCES	(revision 28155)
+++ firmware/SOURCES	(working copy)
@@ -354,6 +354,7 @@
 /* USB Stack */
 #if !defined(SIMULATOR)
 #ifdef HAVE_USBSTACK
+usbstack/psgroove.c
 usbstack/usb_core.c
 #ifdef USB_ENABLE_STORAGE
 usbstack/usb_storage.c
Index: firmware/target/arm/usb-drv-arc.c
===================================================================
--- firmware/target/arm/usb-drv-arc.c	(revision 28155)
+++ firmware/target/arm/usb-drv-arc.c	(working copy)
@@ -435,11 +435,11 @@
 
     REG_USBMODE = USBMODE_CTRL_MODE_DEVICE;
 
-#ifdef USB_NO_HIGH_SPEED
+//#ifdef USB_NO_HIGH_SPEED
     /* Force device to full speed */
     /* See 32.9.5.9.2 */
     REG_PORTSC1 |= PORTSCX_PORT_FORCE_FULL_SPEED;
-#endif
+//#endif
 
     init_control_queue_heads();
     memset(td_array, 0, sizeof td_array);
@@ -624,6 +624,11 @@
     return prime_transfer(EP_NUM(endpoint), ptr, length, false, false);
 }
 
+int usb_drv_recv_blocking(int endpoint, void* ptr, int length)
+{
+	return prime_transfer(EP_NUM(endpoint), ptr, length, false, true);
+}
+
 int usb_drv_port_speed(void)
 {
     return (REG_PORTSC1 & 0x08000000) ? 1 : 0;
@@ -829,6 +834,8 @@
 
         if (endpoint->allocated[ep_dir])
             continue;
+		if (endpoint->allocated[other_dir])
+			continue;
 
         if (endpoint->allocated[other_dir] &&
                 endpoint->type[other_dir] != ep_type) {
@@ -987,9 +994,9 @@
     memset(qh_array, 0, sizeof qh_array);
 
     /*** control ***/
-    qh_array[EP_CONTROL].max_pkt_length = 64 << QH_MAX_PKT_LEN_POS | QH_IOS;
+    qh_array[EP_CONTROL].max_pkt_length = 8 << QH_MAX_PKT_LEN_POS | QH_IOS;
     qh_array[EP_CONTROL].dtd.next_td_ptr = QH_NEXT_TERMINATE;
-    qh_array[EP_CONTROL+1].max_pkt_length = 64 << QH_MAX_PKT_LEN_POS;
+    qh_array[EP_CONTROL+1].max_pkt_length = 8 << QH_MAX_PKT_LEN_POS;
     qh_array[EP_CONTROL+1].dtd.next_td_ptr = QH_NEXT_TERMINATE;
 }
 /* manual: 32.14.4.1 Queue Head Initialization */
Index: firmware/usb.c
===================================================================
--- firmware/usb.c	(revision 28155)
+++ firmware/usb.c	(working copy)
@@ -43,6 +43,7 @@
 #endif
 #include "logf.h"
 #include "screendump.h"
+#include "usbstack\psgroove.h"
 
 /* Conditions under which we want the entire driver */
 #if !defined(BOOTLOADER) || (CONFIG_CPU == SH7034) || \
@@ -274,6 +275,7 @@
                     break;
                 }
 #endif
+				usb_core_enable_driver(USB_DRIVER_PSGROOVE, true);
 #ifdef HAVE_USB_POWER
                 if(usb_power_button())
                 {
Index: firmware/usbstack/psgroove.c
===================================================================
--- firmware/usbstack/psgroove.c	(revision 0)
+++ firmware/usbstack/psgroove.c	(revision 0)
@@ -0,0 +1,764 @@
+// IMPORTANT: Enabling DEBUGF logs will probably slow down transfers enough
+// that the exploit will not work. If enabling DEBUGF, make sure to limit the
+// amount of log spam.
+
+#include "string.h"
+#include "system.h"
+#include "timer.h"
+#include "usb_core.h"
+#include "usb_drv.h"
+
+#define LOGF_ENABLE
+#include "logf.h"
+
+#include "psgroove.h"
+#include "psgroove_descriptors.h"
+
+// Used for discarding JIG challenge
+extern int usb_drv_recv_blocking(int endpoint, void* ptr, int length);
+
+// PP502x-only regs...
+#define REG_ENDPTCTRL(_x_)			(*(volatile unsigned int *)(USB_BASE+0x1c0+4*(_x_)))
+#define EPCTRL_TX_DATA_TOGGLE_RST	(0x00400000) // in
+#define EPCTRL_RX_DATA_TOGGLE_RST	(0x00000040) // out
+
+// USB HUB spec
+#define PORT_EMPTY		0x0100 /* powered only */
+#define PORT_FULL		0x0103 /* connected, enabled, powered, full-speed */
+#define C_PORT_CONN		0x0001 /* connection */
+#define C_PORT_RESET	0x0010 /* reset */
+#define C_PORT_NONE		0x0000 /* no change */
+static uint16_t port_status[6] = { PORT_EMPTY, PORT_EMPTY, PORT_EMPTY, PORT_EMPTY, PORT_EMPTY, PORT_EMPTY };
+static uint16_t port_change[6] = { C_PORT_NONE, C_PORT_NONE, C_PORT_NONE, C_PORT_NONE, C_PORT_NONE, C_PORT_NONE };
+
+// psgroove state machine status
+enum { 
+	init,
+	wait_hub_ready,
+	hub_ready,
+	p1_wait_reset,
+	p1_wait_enumerate,
+	p1_ready,
+	p2_wait_reset,
+	p2_wait_enumerate,
+	p2_ready,
+	p3_wait_reset,
+	p3_wait_enumerate,
+	p3_ready,
+	p2_wait_disconnect,
+	p4_wait_connect,
+	p4_wait_reset,
+	p4_wait_enumerate,
+	p4_ready,
+	p5_wait_reset,
+	p5_wait_enumerate,
+	p5_challenged,
+	p5_responded,
+	p3_wait_disconnect,
+	p3_disconnected,
+	p5_wait_disconnect,
+	p5_disconnected,
+	p4_wait_disconnect,
+	p4_disconnected,
+	p1_wait_disconnect,
+	p1_disconnected,
+	p6_wait_reset,
+	p6_wait_enumerate,
+	done,
+} volatile state = init;
+
+static const char* state_names[] =
+{
+	"init",
+	"wait_hub_ready",
+	"hub_ready",
+	"p1_wait_reset",
+	"p1_wait_enumerate",
+	"p1_ready",
+	"p2_wait_reset",
+	"p2_wait_enumerate",
+	"p2_ready",
+	"p3_wait_reset",
+	"p3_wait_enumerate",
+	"p3_ready",
+	"p2_wait_disconnect",
+	"p4_wait_connect",
+	"p4_wait_reset",
+	"p4_wait_enumerate",
+	"p4_ready",
+	"p5_wait_reset",
+	"p5_wait_enumerate",
+	"p5_challenged",
+	"p5_responded",
+	"p3_wait_disconnect",
+	"p3_disconnected",
+	"p5_wait_disconnect",
+	"p5_disconnected",
+	"p4_wait_disconnect",
+	"p4_disconnected",
+	"p1_wait_disconnect",
+	"p1_disconnected",
+	"p6_wait_reset",
+	"p6_wait_enumerate",
+	"done"
+};
+#define state_name state_names[state]
+
+volatile uint8_t hub_int_response = 0x00;
+volatile uint8_t hub_int_force_data0 = 0;
+volatile int last_port_conn_clear = 0;
+volatile int last_port_reset_clear = 0;
+
+volatile int8_t port_addr[7] = { -1, -1, -1, -1, -1, -1, -1 };
+volatile int8_t port_cur = -1;
+
+static unsigned char response_data[sizeof(port1_config_descriptor)] USB_DEVBSS_ATTR;
+
+volatile uint8_t expire = 0;
+
+volatile int ep_in = 0, ep_out = 0;
+#define EP_IN	0x81
+#define EP_OUT	0x02
+
+static struct event_queue psgroove_queue;
+static unsigned int psgroove_thread_entry = 0;
+static long psgroove_stack[DEFAULT_STACK_SIZE/sizeof(long)];
+static const char psgroove_thread_name[] = "psgroove";
+
+enum
+{
+	PSGROOVE_TASK_HUB,
+	PSGROOVE_TASK_JIG,
+	PSGROOVE_TIMER_EXPIRED,
+	PSGROOVE_CLR_FTR_CONN,
+	PSGROOVE_CLR_FTR_RST,
+	PSGROOVE_DONE,
+};
+
+#if 0
+static const char* event_names[] = {
+	"PSGROOVE_TASK_HUB",
+	"PSGROOVE_TASK_JIG",
+	"PSGROOVE_TIMER_EXPIRED",
+	"PSGROOVE_CLR_FTR_CONN",
+	"PSGROOVE_CLR_FTR_RST",
+	"PSGROOVE_DONE",
+};
+#endif
+
+static void timer_cb(void)
+{
+	if (expire)
+	{
+		if (--expire == 0)
+			queue_post(&psgroove_queue, PSGROOVE_TIMER_EXPIRED, 0);
+	}
+}
+
+static inline void Endpoint_ResetDataToggle(int ep)
+{
+	if (ep == EP_IN)
+		REG_ENDPTCTRL(ep) |= EPCTRL_TX_DATA_TOGGLE_RST;
+	else if (ep == EP_OUT)
+		REG_ENDPTCTRL(ep) |= EPCTRL_RX_DATA_TOGGLE_RST;
+}
+
+static inline void Endpoint_Write_Byte(int ep, const uint8_t Byte)
+{
+	memcpy(&response_data[0], &Byte, sizeof(Byte));
+	usb_drv_send(ep, response_data, sizeof(Byte));
+}
+
+static inline void send_hub_info(const uint16_t wHubStatus, const uint16_t wHubChange)
+{
+	uint32_t data = (wHubChange << 16) | wHubStatus;
+	
+	memcpy(&response_data[0], &data, sizeof(data));
+
+	DEBUGF("send_hub_info %02x%02x%02x%02x",
+		*(uint8_t*)&response_data[0], *(uint8_t*)&response_data[1],
+		*(uint8_t*)&response_data[2], *(uint8_t*)&response_data[3]);
+
+	usb_drv_recv(EP_CONTROL, NULL, 0);
+	usb_drv_send(EP_CONTROL, response_data, sizeof(data));
+}
+
+static inline void Endpoint_Discard_Stream(int ep, uint16_t Length)
+{
+	usb_drv_recv_blocking(ep, response_data, Length);
+
+	DEBUGF("%02x%02x%02x%02x%02x%02x%02x%02x",
+		*(uint8_t*)&response_data[0],
+		*(uint8_t*)&response_data[1],
+		*(uint8_t*)&response_data[2],
+		*(uint8_t*)&response_data[3],
+		*(uint8_t*)&response_data[4],
+		*(uint8_t*)&response_data[5],
+		*(uint8_t*)&response_data[6],
+		*(uint8_t*)&response_data[7]);
+}
+
+static inline void Endpoint_Write_PStream_LE(int ep, void* Buffer, uint16_t Length)
+{
+	memcpy(&response_data[0], Buffer, Length);
+
+	DEBUGF("%02x%02x%02x%02x",
+		*(uint8_t*)&response_data[0], *(uint8_t*)&response_data[1],
+		*(uint8_t*)&response_data[2], *(uint8_t*)&response_data[3]);
+
+	usb_drv_send(ep, response_data, Length);
+}
+
+void psgroove_usb_set_address(uint8_t Address)
+{
+	uint8_t addr = Address & 0x7f;
+	port_addr[port_cur] = addr;
+	usb_drv_set_address(addr);
+}
+
+static void switch_port(int8_t port)
+{
+	if (port_cur == port) return;
+	port_cur = port;
+	if (port_addr[port] < 0)
+		port_addr[port] = 0;
+	usb_drv_set_address(port_addr[port] & 0x7f);
+}
+
+static void connect_port(int port)
+{
+	last_port_reset_clear = 0;
+	hub_int_response = (1 << port);
+	port_status[port - 1] = PORT_FULL;
+	port_change[port - 1] = C_PORT_CONN;
+	queue_post(&psgroove_queue, PSGROOVE_TASK_HUB, 0);
+}
+
+static void disconnect_port(int port)
+{
+	last_port_conn_clear = 0;
+	hub_int_response = (1 << port);
+	port_status[port - 1] = PORT_EMPTY;
+	port_change[port - 1] = C_PORT_CONN;
+	queue_post(&psgroove_queue, PSGROOVE_TASK_HUB, 0);
+}
+
+static void HUB_Task(void)
+{
+	if (hub_int_response) {
+		DEBUGF("hub_task %d %02x %d", port_cur, hub_int_response, hub_int_force_data0);
+		if (hub_int_force_data0) {
+			Endpoint_ResetDataToggle(ep_in);
+			hub_int_force_data0 = 0;
+		}
+		Endpoint_Write_Byte(ep_in, hub_int_response);
+		hub_int_response = 0x00;
+	}
+}
+
+static const uint8_t jig_response[64] = {
+	0x80, 0x00, 0x00, 0x00, 0x00, 0x3d, 0xee, 0x78, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3d, 0xee, 0x88,
+	0x80, 0x00, 0x00, 0x00, 0x00, 0x33, 0xe7, 0x20, 0xe8, 0x83, 0xff, 0xf0, 0xe8, 0x63, 0xff, 0xf8,
+	0xe8, 0xa3, 0x00, 0x18, 0x38, 0x63, 0x10, 0x00, 0x7c, 0x04, 0x28, 0x00, 0x40, 0x82, 0xff, 0xf4,
+	0x38, 0xc3, 0xf0, 0x20, 0x7c, 0xc9, 0x03, 0xa6, 0x4e, 0x80, 0x04, 0x20, 0x04, 0x00, 0x00, 0x00
+};
+
+static void JIG_Task(void)
+{
+	static int bytes_out = 0, bytes_in = 0;
+
+	for (;;)
+	{
+		if (state < p5_challenged)
+		{
+			Endpoint_Discard_Stream(ep_out, 8);
+			bytes_out += 8;
+			if (bytes_out >= 64) {
+				state = p5_challenged;
+				expire = 50; // was 90
+			}
+		}
+		else if (state != p5_responded)
+		{
+			if (expire == 0)
+			{
+				if (bytes_in < 64) {
+					Endpoint_Write_PStream_LE(ep_in, (void*)&jig_response[bytes_in], 8);
+					bytes_in += 8;
+					if (bytes_in >= 64) {
+						state = p5_responded;
+						expire = 15;
+						return;
+					}
+				}
+			}
+		}
+
+		sleep(10);
+	}
+}
+
+static void psgroove_thread(void)
+{
+	struct queue_event ev;
+
+	state = init;
+	switch_port(0);
+
+	long int ticks = current_tick;
+	int secs = ticks / HZ;
+	int ms = ticks - secs * HZ;
+	logf("psgroove %s %d.%d", state_name, secs, ms);
+
+	for (;;)
+	{
+		queue_wait(&psgroove_queue, &ev);
+
+#if 0 // informative, but sloooww
+		if ((state >= p5_wait_reset) && ((unsigned)ev.id <= PSGROOVE_DONE))
+		{
+			ticks = current_tick;
+			secs = ticks / HZ;
+			ms = ticks - secs * HZ;
+			logf("%s %s %d.%d", event_names[ev.id], state_name, secs, ms);
+		}
+#endif
+
+		switch (ev.id)
+		{
+		case PSGROOVE_TASK_HUB:
+			HUB_Task();
+			break;
+
+		case PSGROOVE_TASK_JIG:
+			JIG_Task();
+			break;
+
+		case PSGROOVE_TIMER_EXPIRED:
+			switch (state)
+			{
+			case hub_ready:
+				connect_port(1);
+				state = p1_wait_reset;
+				break;
+			case p1_ready:
+				switch_port(0);
+				connect_port(2);
+				state = p2_wait_reset;
+				break;
+			case p2_ready:
+				switch_port(0);
+				connect_port(3);
+				state = p3_wait_reset;
+				break;
+			case p3_ready:
+				switch_port(0);
+				disconnect_port(2);
+				state = p2_wait_disconnect;
+				break;
+			case p4_wait_connect:
+				connect_port(4);
+				state = p4_wait_reset;
+				break;
+			case p4_ready:
+				switch_port(0);
+				/* When first connecting port 5, we need to
+					have the wrong data toggle for the PS3 to
+					respond */
+				hub_int_force_data0 = 1;
+				connect_port(5);
+				state = p5_wait_reset;
+				break;
+			case p5_responded:
+				switch_port(0);
+				/* Need wrong data toggle again */
+				hub_int_force_data0 = 1;
+				disconnect_port(3);
+				state = p3_wait_disconnect;
+				break;
+			case p3_disconnected:
+				switch_port(0);
+				disconnect_port(5);
+				state = p5_wait_disconnect;
+				break;
+			case p5_disconnected:
+				switch_port(0);
+				disconnect_port(4);
+				state = p4_wait_disconnect;
+				break;
+			case p4_disconnected:
+				switch_port(0);
+				disconnect_port(1);
+				state = p1_wait_disconnect;
+				break;
+			case p1_disconnected:
+				switch_port(0);
+				connect_port(6);
+				state = p6_wait_reset;
+				break;
+			default:
+				DEBUGF("TIMER_EXPIRED %s", state_name);
+				break;
+			}
+			break;
+
+		case PSGROOVE_CLR_FTR_CONN:
+			if (state == p2_wait_disconnect && last_port_conn_clear == 2)
+			{
+				state = p4_wait_connect;
+				expire = 15;
+			}
+			else if (state == p3_wait_disconnect && last_port_conn_clear == 3)
+			{
+				state = p3_disconnected;
+				expire = 45;
+			}
+			else if (state == p5_wait_disconnect && last_port_conn_clear == 5)
+			{
+				state = p5_disconnected;
+				expire = 20;
+			}
+			else if (state == p4_wait_disconnect && last_port_conn_clear == 4)
+			{
+				state = p4_disconnected;
+				expire = 20;
+			}
+			else if (state == p1_wait_disconnect && last_port_conn_clear == 1)
+			{
+				state = p1_disconnected;
+				expire = 20;
+			}
+			else
+				DEBUGF("CLR_FTR_CONN %s %d", state_name, last_port_conn_clear);
+			break;
+
+		case PSGROOVE_CLR_FTR_RST:
+			#define HANDLE_CLR_FTR_RST(x)									\
+			if (state == p##x##_wait_reset && last_port_reset_clear == x)	\
+			{																\
+				switch_port(x);												\
+				state = p##x##_wait_enumerate;								\
+			}																\
+			else
+			HANDLE_CLR_FTR_RST(1)
+			HANDLE_CLR_FTR_RST(2)
+			HANDLE_CLR_FTR_RST(3)
+			HANDLE_CLR_FTR_RST(4)
+			HANDLE_CLR_FTR_RST(5)
+			HANDLE_CLR_FTR_RST(6)
+				DEBUGF("CLR_FTR_RST %s %d", state_name, last_port_reset_clear);
+			break;
+
+		case PSGROOVE_DONE:
+			cpu_boost(0);
+			timer_unregister();
+			
+			ticks = current_tick;
+			secs = ticks / HZ;
+			ms = ticks - secs * HZ;
+			logf("psgroove %s %d.%d", state_name, secs, ms);
+			
+			return;
+			break;
+
+		case SYS_USB_DISCONNECTED:
+			// TODO
+			logf("usb disconnected :/");
+			break;
+		}
+	}
+}
+
+void psgroove_proc_init(void)
+{
+	if (psgroove_thread_entry == 0)
+	{
+		cpu_boost(1);
+
+		queue_init(&psgroove_queue, true);
+
+		// 10 millisec timer
+		timer_register(1, NULL, TIMER_FREQ * .010, timer_cb IF_COP(, CPU));
+
+		psgroove_thread_entry = create_thread(psgroove_thread, psgroove_stack,
+			sizeof(psgroove_stack), 0, psgroove_thread_name
+			IF_PRIO(, PRIORITY_SYSTEM) IF_COP(, CPU));
+	}
+}
+
+//////////////////////////////////////////////////////////////////////////
+// Rockbox usb driver interface
+//////////////////////////////////////////////////////////////////////////
+static int usb_interface;
+
+// 0: control
+// 1: int in
+// 2: int out
+int psgroove_request_endpoints(struct usb_class_driver *drv)
+{
+	if ((ep_in = usb_core_request_endpoint(USB_ENDPOINT_XFER_INT, USB_DIR_IN, drv)) < 0)
+		return -1;
+	if ((ep_out = usb_core_request_endpoint(USB_ENDPOINT_XFER_INT, USB_DIR_OUT, drv)) < 0)
+		return -1;
+	if (ep_in != EP_IN || ep_out != EP_OUT)
+		logf("WTF endpoints in:%d out:%d", EP_NUM(ep_in), EP_NUM(ep_out));
+
+	return 0;
+}
+
+int psgroove_set_first_interface(int interface)
+{
+	usb_interface = interface;
+
+	return interface + 1;
+}
+
+int psgroove_get_config_descriptor(unsigned char *dest, int max_packet_size)
+{
+	(void)dest, (void)max_packet_size;
+	return 0;
+}
+
+// replaces core's void request_handler_device_get_descriptor(struct usb_ctrlrequest* req)
+void psgroove_request_handler_device_get_descriptor(struct usb_ctrlrequest* req)
+{
+	const uint8_t  DescriptorType   = (req->wValue >> 8);
+	const uint8_t  DescriptorNumber = (req->wValue & 0xFF);
+	const uint16_t  wLength = req->wLength;
+
+	void*          Address = NULL;
+	uint16_t       Size    = 0;
+
+	switch (DescriptorType)
+	{
+	case USB_DT_DEVICE:
+		switch (port_cur) {
+		case 0:
+			Address = (void*)HUB_Device_Descriptor;
+			Size    = sizeof(HUB_Device_Descriptor);
+			break;
+		case 1:
+			Address = (void*)port1_device_descriptor;
+			Size    = sizeof(port1_device_descriptor);
+			break;
+		case 2:
+			Address = (void*)port2_device_descriptor;
+			Size    = sizeof(port2_device_descriptor);
+			break;
+		case 3:
+			Address = (void*)port3_device_descriptor;
+			Size    = sizeof(port3_device_descriptor);
+			break;
+		case 4:
+			Address = (void*)port4_device_descriptor;
+			Size    = sizeof(port4_device_descriptor);
+			break;
+		case 5:
+			Address = (void*)port5_device_descriptor;
+			Size    = sizeof(port5_device_descriptor);
+			break;
+		case 6:
+			Address = (void*)port6_device_descriptor;
+			Size    = sizeof(port6_device_descriptor);
+			break;
+		}
+		break;
+	case USB_DT_CONFIG:
+		switch (port_cur) {
+		case 0:
+			Address = (void*)HUB_Config_Descriptor;
+			Size    = sizeof(HUB_Config_Descriptor);
+			break;
+		case 1:
+			// 4 configurations are the same.
+			// For the initial 8-byte request, we give a different
+			// length response than in the full request.
+			if (DescriptorNumber < 4) {
+				if (wLength == 8) {
+					Address = (void*)port1_short_config_descriptor;
+					Size    = sizeof(port1_short_config_descriptor);
+				} else {
+					Address = (void*)port1_config_descriptor;
+					Size    = sizeof(port1_config_descriptor);
+				}
+				if (DescriptorNumber == 3 && wLength > 8) {
+					state = p1_ready;
+					expire = 10;
+				}
+			}
+			break;
+		case 2:
+			// only 1 config
+			Address = (void*)port2_config_descriptor;
+			Size    = sizeof(port2_config_descriptor);
+			state = p2_ready;
+			expire = 15;
+			break;
+		case 3:
+			// 2 configurations are the same
+			Address = (void*)port3_config_descriptor;
+			Size    = sizeof(port3_config_descriptor);
+			if (DescriptorNumber == 1 && wLength > 8) {
+				state = p3_ready;
+				expire = 10;
+			}
+			break;
+		case 4:
+			// 3 configurations
+			if (DescriptorNumber == 0) {
+				Address = (void*)port4_config_descriptor_1;
+				Size    = sizeof(port4_config_descriptor_1);
+			} else if (DescriptorNumber == 1) {
+				if (wLength == 8) {
+					Address = (void*)port4_short_config_descriptor_2;
+					Size    = sizeof(port4_short_config_descriptor_2);
+				} else {
+					Address = (void*)port4_config_descriptor_2;
+					Size    = sizeof(port4_config_descriptor_2);
+				}
+			} else if (DescriptorNumber == 2) {
+				Address = (void*)port4_config_descriptor_3;
+				Size    = sizeof(port4_config_descriptor_3);
+				if (wLength > 8) {
+					state = p4_ready;
+					expire = 20;  // longer seems to help this one?
+				}
+			}
+			break;
+		case 5:
+			// 1 config
+			Address = (void*)port5_config_descriptor;
+			Size    = sizeof(port5_config_descriptor);
+			break;
+		case 6:
+			// 1 config
+			Address = (void*)port6_config_descriptor;
+			Size    = sizeof(port6_config_descriptor);
+			break;
+		}
+		break;
+	case 0x29: // HUB descriptor (always to port 0 we'll assume)
+		switch (port_cur) {
+		case 0:
+			Address = (void*)HUB_Hub_Descriptor;
+			Size    = sizeof(HUB_Hub_Descriptor);
+			break;
+		}
+		break;
+	}
+
+	Size = MIN(wLength, Size);
+	memcpy(&response_data[0], Address, Size);
+
+	usb_drv_recv(EP_CONTROL, NULL, 0);
+	usb_drv_send(EP_CONTROL, response_data, Size);
+}
+
+void psgroove_init_connection(void) {}
+void psgroove_init(void) {}
+void psgroove_disconnect(void) {}
+void psgroove_transfer_complete(int ep, int dir, int status, int length)
+{
+	(void)ep, (void)dir, (void)status, (void)length;
+}
+
+bool psgroove_control_request(struct usb_ctrlrequest* req, unsigned char* dest)
+{
+	(void)dest;
+	
+	DEBUGF("%d %s %02x %02x %04x %04x", port_cur, state_name, req->bRequest, req->bRequestType, req->wValue, req->wIndex);
+	
+	if (port_cur == 6 && req->bRequest == 0xAA) {
+		usb_drv_recv(EP_CONTROL, NULL, 0);
+		usb_drv_send(EP_CONTROL, NULL, 0);
+		state = done;
+		queue_post(&psgroove_queue, PSGROOVE_DONE, 0);
+		return true;
+	}
+
+	if (port_cur == 5 && req->bRequest == USB_REQ_SET_INTERFACE)
+	{
+		// Just ack the actual event...
+		usb_drv_send(EP_CONTROL, NULL, 0);
+
+		// But now we kickoff the JIG :)
+		queue_post(&psgroove_queue, PSGROOVE_TASK_JIG, 0);
+		return true;
+	}
+
+	if (port_cur == 0 &&
+		req->bRequestType == 0xA0 &&
+		req->bRequest == 0x00 &&  // GET HUB STATUS
+		req->wValue == 0x00 &&
+		req->wIndex == 0x00 &&
+		req->wLength == 0x04) {
+			send_hub_info(0, 0);
+			return true;
+	}
+
+	if (port_cur == 0 &&
+		req->bRequestType == 0xA3 &&  
+		req->bRequest == 0x00 &&   //  GET PORT STATUS
+		req->wValue == 0x00 &&
+		req->wLength == 0x04) {
+			uint8_t p = req->wIndex;
+			if (p < 1 || p > 6) return false;
+
+			send_hub_info(port_status[p - 1], port_change[p - 1]);
+			return true;
+	}
+
+	if (port_cur == 0 &&
+		req->bRequestType == 0x23 &&
+		req->bRequest == 0x03 && // SET_FEATURE
+		req->wLength == 0x00) {
+			uint8_t p = req->wIndex;
+			if (p < 1 || p > 6) return false;
+
+			usb_drv_recv(EP_CONTROL, NULL, 0);
+			usb_drv_send(EP_CONTROL, NULL, 0);
+
+			switch(req->wValue) {
+			case 0x0008: // PORT_POWER
+				if (p == 6 && state == init) {
+					/* after the 6th port is powered, wait a bit and continue */
+					state = hub_ready;
+					expire = 15;
+				}
+				break;
+			case 0x0004: // PORT_RESET
+				hub_int_response = (1 << p);
+				port_change[p - 1] |= C_PORT_RESET;
+				queue_post(&psgroove_queue, PSGROOVE_TASK_HUB, 0);
+				break;
+			}
+			return true;
+	}
+
+	if (port_cur == 0 &&
+		req->bRequestType == 0x23 &&
+		req->bRequest == 0x01 && // CLEAR_FEATURE
+		req->wLength == 0x00) {
+			uint8_t p = req->wIndex;
+			if (p < 1 || p > 6) return false;
+
+			usb_drv_recv(EP_CONTROL, NULL, 0);
+			usb_drv_send(EP_CONTROL, NULL, 0);
+
+			switch(req->wValue) {
+			case 0x0010: // C_PORT_CONNECTION
+				port_change[p - 1] &= ~C_PORT_CONN;
+				last_port_conn_clear = p;
+				queue_post(&psgroove_queue, PSGROOVE_CLR_FTR_CONN, 0);
+				break;
+			case 0x0014: // C_PORT_RESET
+				port_change[p - 1] &= ~C_PORT_RESET;
+				last_port_reset_clear = p;
+				queue_post(&psgroove_queue, PSGROOVE_CLR_FTR_RST, 0);
+				break;
+			}
+			return true;
+	}
+
+	return false;
+}
Index: firmware/usbstack/psgroove.h
===================================================================
--- firmware/usbstack/psgroove.h	(revision 0)
+++ firmware/usbstack/psgroove.h	(revision 0)
@@ -0,0 +1,24 @@
+#ifndef _PSGROOVE_H
+#define _PSGROOVE_H
+
+#include "usb_ch9.h"
+#include "usb_core.h"
+
+void psgroove_proc_init(void);
+
+void psgroove_usb_set_address(uint8_t Address);
+
+// Replaces Rockbox usb core function
+void psgroove_request_handler_device_get_descriptor(struct usb_ctrlrequest* req);
+
+// Rockbox interface
+int psgroove_request_endpoints(struct usb_class_driver *drv);
+int psgroove_set_first_interface(int interface);
+int psgroove_get_config_descriptor(unsigned char *dest, int max_packet_size);
+void psgroove_init_connection(void);
+void psgroove_init(void);
+void psgroove_disconnect(void);
+void psgroove_transfer_complete(int ep, int dir, int status, int length);
+bool psgroove_control_request(struct usb_ctrlrequest* req, unsigned char* dest);
+
+#endif /* _PSGROOVE_H */
Index: firmware/usbstack/psgroove_descriptors.h
===================================================================
--- firmware/usbstack/psgroove_descriptors.h	(revision 0)
+++ firmware/usbstack/psgroove_descriptors.h	(revision 0)
@@ -0,0 +1,614 @@
+const uint8_t HUB_Device_Descriptor[] = {
+	0x12, 0x01, 0x00, 0x02, 0x09, 0x00, 0x01, 0x08,
+	0xAA, 0xAA, 0xCC, 0xCC, 0x00, 0x01, 0x00, 0x00,
+	0x00, 0x01,
+};
+
+const uint8_t HUB_Config_Descriptor[] = {
+	// Config
+	0x09, 0x02, 0x19, 0x00, 0x01, 0x01, 0x00, 0xe0,
+	0x32,
+	// Interface
+	0x09, 0x04, 0x00, 0x00, 0x01, 0x09, 0x00, 0x00,
+	0x00,
+	// Endpoint (interrupt in)
+	0x07, 0x05, 0x81, 0x03, 0x01, 0x00, 0x0c,
+};
+
+const uint8_t HUB_Hub_Descriptor[] = {
+	0x09, 0x29, 0x06, 0xa9, 0x00, 0x32, 0x64, 0x00,
+	0xff,
+};
+
+const uint8_t port1_device_descriptor[] = {
+	0x12, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08,
+	0xAA, 0xAA, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x04,
+};
+
+const uint8_t port1_short_config_descriptor[] = {
+	0x09, 0x02, 0x00, 0x0f, 0x01, 0x00, 0x00, 0x80,
+};
+
+const uint8_t port1_config_descriptor[] = {
+	0x09, 0x02, 0x12, 0x00, 0x01, 0x00, 0x00, 0x80, 0xFA, 0x09, 0x04, 0x00,
+	0x00, 0x00, 0xFE, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0xFA, 0xCE, 0xB0, 0x03, 0xAA, 0xBB, 0xCC, 0xDD, 0x38, 0x63, 0xF0, 0x00,
+	0x38, 0xA0, 0x10, 0x00, 0x38, 0x80, 0x00, 0x01, 0x78, 0x84, 0xF8, 0x06,
+	0x64, 0x84, 0x00, 0x70, 0x38, 0xA5, 0xFF, 0xF8, 0x7C, 0xC3, 0x28, 0x2A,
+	0x7C, 0xC4, 0x29, 0x2A, 0x28, 0x25, 0x00, 0x00, 0x40, 0x82, 0xFF, 0xF0,
+	0x38, 0x84, 0x00, 0x80, 0x7C, 0x89, 0x03, 0xA6, 0x4E, 0x80, 0x04, 0x20,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x08, 0x02, 0xA6,
+	0xF8, 0x21, 0xFF, 0x61, 0xFB, 0x61, 0x00, 0x78, 0xFB, 0x81, 0x00, 0x80,
+	0xFB, 0xA1, 0x00, 0x88, 0xFB, 0xC1, 0x00, 0x90, 0xFB, 0xE1, 0x00, 0x98,
+	0xF8, 0x01, 0x00, 0xB0, 0x3B, 0xE0, 0x00, 0x01, 0x7B, 0xFF, 0xF8, 0x06,
+	0x7F, 0xE3, 0xFB, 0x78, 0x64, 0x63, 0x00, 0x05, 0x60, 0x63, 0x0B, 0x3C,
+	0x7F, 0xE4, 0xFB, 0x78, 0x64, 0x84, 0x00, 0x70, 0x60, 0x84, 0x01, 0xCC,
+	0x38, 0xA0, 0x04, 0xFA, 0x4B, 0x97, 0xBF, 0x59, 0x7F, 0xE3, 0xFB, 0x78,
+	0x64, 0x63, 0x00, 0x05, 0x60, 0x63, 0x0B, 0x3C, 0x38, 0x63, 0x00, 0x20,
+	0x4B, 0x9D, 0x22, 0x01, 0x7F, 0xE3, 0xFB, 0x78, 0x64, 0x63, 0x00, 0x05,
+	0x60, 0x63, 0x0B, 0x3C, 0x7F, 0xE4, 0xFB, 0x78, 0x64, 0x84, 0x00, 0x2E,
+	0x60, 0x84, 0xB1, 0x28, 0x38, 0x63, 0x00, 0x10, 0xF8, 0x64, 0x01, 0x20,
+	0x7F, 0xE5, 0xFB, 0x78, 0x64, 0xA5, 0x00, 0x70, 0x60, 0xA5, 0x01, 0x50,
+	0x80, 0x65, 0x00, 0x00, 0x28, 0x03, 0x00, 0x00, 0x41, 0x82, 0x00, 0x18,
+	0x80, 0x85, 0x00, 0x04, 0x7C, 0x63, 0xFA, 0x14, 0x90, 0x83, 0x00, 0x00,
+	0x38, 0xA5, 0x00, 0x08, 0x4B, 0xFF, 0xFF, 0xE4, 0x48, 0x00, 0x05, 0xA8,
+	0xF8, 0x21, 0xFF, 0x51, 0x7C, 0x08, 0x02, 0xA6, 0xFB, 0xC1, 0x00, 0xA0,
+	0xFB, 0xE1, 0x00, 0xA8, 0xFB, 0xA1, 0x00, 0x98, 0xF8, 0x01, 0x00, 0xC0,
+	0x3B, 0xC0, 0x07, 0xD0, 0x3B, 0xE0, 0x00, 0xC8, 0x4B, 0x90, 0xA9, 0xB8,
+	0x00, 0x04, 0x90, 0xE0, 0xE8, 0x82, 0x0F, 0x08, 0x00, 0x04, 0x90, 0xE4,
+	0xE8, 0x7C, 0x00, 0x20, 0x00, 0x04, 0x90, 0xE8, 0xF8, 0x64, 0x00, 0x00,
+	0x00, 0x04, 0xF0, 0xA8, 0x48, 0x00, 0x1A, 0x9D, 0x00, 0x2A, 0xAF, 0xC8,
+	0x4B, 0xDA, 0x5B, 0x80, 0x00, 0x04, 0xED, 0x18, 0x38, 0x80, 0x00, 0x00,
+	0x00, 0x04, 0xED, 0x1C, 0x90, 0x83, 0x00, 0x00, 0x00, 0x04, 0xED, 0x20,
+	0x4E, 0x80, 0x00, 0x20, 0x00, 0x3B, 0xA8, 0x90, 0x01, 0x00, 0x00, 0x00,
+	0x00, 0x05, 0x05, 0xD0, 0x38, 0x60, 0x00, 0x01, 0x00, 0x05, 0x05, 0xD4,
+	0x4E, 0x80, 0x00, 0x20, 0x00, 0x01, 0x7C, 0xBC, 0xE8, 0x63, 0x00, 0x00,
+	0x00, 0x01, 0x7C, 0xC0, 0x4E, 0x80, 0x00, 0x20, 0x00, 0x01, 0x7C, 0xC8,
+	0xF8, 0x83, 0x00, 0x00, 0x00, 0x01, 0x7C, 0xCC, 0x4E, 0x80, 0x00, 0x20,
+	0x00, 0x00, 0x00, 0x00, 0x38, 0x60, 0x00, 0x01, 0x4E, 0x80, 0x00, 0x20,
+	0x48, 0x00, 0x02, 0x78, 0x48, 0x00, 0x01, 0xEC, 0x80, 0x00, 0x00, 0x00,
+	0x00, 0x05, 0x0C, 0xA8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x33, 0xE7, 0x20,
+	0x80, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x32, 0x80, 0x00, 0x00, 0x00,
+	0x00, 0x05, 0x0B, 0x7C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0B, 0x8C,
+	0x80, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0B, 0x9C, 0x80, 0x00, 0x00, 0x00,
+	0x00, 0x05, 0x0B, 0xD4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x33, 0xE7, 0x20,
+	0x80, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0C, 0x1C, 0x80, 0x00, 0x00, 0x00,
+	0x00, 0x33, 0xE7, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0C, 0x78,
+	0x80, 0x00, 0x00, 0x00, 0x00, 0x33, 0xE7, 0x20, 0x80, 0x00, 0x00, 0x00,
+	0x00, 0x05, 0x0C, 0x84, 0x80, 0x00, 0x00, 0x00, 0x00, 0x33, 0xE7, 0x20,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0xF8, 0x21, 0xFF, 0x81, 0x7C, 0x08, 0x02, 0xA6, 0xF8, 0x01, 0x00, 0x90,
+	0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x00, 0x01, 0x48, 0x08, 0x1D, 0xB1,
+	0x80, 0xA3, 0x00, 0x08, 0x38, 0x60, 0x00, 0x00, 0x3C, 0x80, 0xAA, 0xAA,
+	0x60, 0x84, 0xC0, 0xDE, 0x7C, 0x04, 0x28, 0x40, 0x41, 0x82, 0x00, 0x08,
+	0x38, 0x60, 0xFF, 0xFF, 0x7C, 0x63, 0x07, 0xB4, 0xE8, 0x01, 0x00, 0x90,
+	0x7C, 0x08, 0x03, 0xA6, 0x38, 0x21, 0x00, 0x80, 0x4E, 0x80, 0x00, 0x20,
+	0xF8, 0x21, 0xFF, 0x81, 0x7C, 0x08, 0x02, 0xA6, 0xF8, 0x01, 0x00, 0x90,
+	0x38, 0x80, 0x00, 0x00, 0x48, 0x08, 0x1D, 0x99, 0x38, 0x81, 0x00, 0x70,
+	0x38, 0xA0, 0x00, 0x00, 0xF8, 0xA4, 0x00, 0x00, 0x38, 0xC0, 0x21, 0xAA,
+	0xB0, 0xC4, 0x00, 0x00, 0x38, 0xC0, 0x00, 0x00, 0xB0, 0xC4, 0x00, 0x06,
+	0x38, 0xC0, 0x00, 0x01, 0x78, 0xC6, 0xF8, 0x06, 0x64, 0xC6, 0x00, 0x05,
+	0x60, 0xC6, 0x0B, 0xAC, 0x38, 0xE0, 0x00, 0x00, 0x48, 0x08, 0x1C, 0xCD,
+	0x38, 0x60, 0x00, 0x00, 0xE8, 0x01, 0x00, 0x90, 0x7C, 0x08, 0x03, 0xA6,
+	0x38, 0x21, 0x00, 0x80, 0x4E, 0x80, 0x00, 0x20, 0x4E, 0x80, 0x00, 0x20,
+	0x39, 0x60, 0x00, 0xFF, 0x44, 0x00, 0x00, 0x22, 0x2C, 0x03, 0x00, 0x00,
+	0x40, 0x82, 0x00, 0x1C, 0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06,
+	0x64, 0x63, 0x00, 0x05, 0x60, 0x63, 0x0B, 0xBC, 0x38, 0x80, 0x00, 0x01,
+	0x90, 0x83, 0x00, 0x10, 0x4E, 0x80, 0x00, 0x20, 0xF8, 0x21, 0xFF, 0x31,
+	0x7C, 0x08, 0x02, 0xA6, 0xF8, 0x01, 0x00, 0xE0, 0xFB, 0xE1, 0x00, 0xC8,
+	0x38, 0x81, 0x00, 0x70, 0x48, 0x16, 0x2E, 0x81, 0x3B, 0xE0, 0x00, 0x01,
+	0x7B, 0xFF, 0xF8, 0x06, 0x67, 0xFF, 0x00, 0x05, 0x63, 0xFF, 0x0B, 0xBC,
+	0xE8, 0x7F, 0x00, 0x00, 0x2C, 0x23, 0x00, 0x00, 0x41, 0x82, 0x00, 0x0C,
+	0x38, 0x80, 0x00, 0x27, 0x48, 0x01, 0x17, 0xE9, 0x38, 0x80, 0x00, 0x27,
+	0x38, 0x60, 0x08, 0x00, 0x48, 0x01, 0x13, 0x9D, 0xF8, 0x7F, 0x00, 0x00,
+	0xE8, 0x81, 0x00, 0x70, 0x4B, 0xFF, 0xC5, 0xF9, 0xE8, 0x61, 0x00, 0x70,
+	0x38, 0x80, 0x00, 0x27, 0x48, 0x01, 0x17, 0xC5, 0xE8, 0x7F, 0x00, 0x00,
+	0x4B, 0xFF, 0xC6, 0x0D, 0xE8, 0x9F, 0x00, 0x00, 0x7C, 0x64, 0x1A, 0x14,
+	0xF8, 0x7F, 0x00, 0x08, 0x38, 0x60, 0x00, 0x00, 0xEB, 0xE1, 0x00, 0xC8,
+	0xE8, 0x01, 0x00, 0xE0, 0x38, 0x21, 0x00, 0xD0, 0x7C, 0x08, 0x03, 0xA6,
+	0x4E, 0x80, 0x00, 0x20, 0xF8, 0x21, 0xFF, 0x61, 0x7C, 0x08, 0x02, 0xA6,
+	0xFB, 0x81, 0x00, 0x80, 0xFB, 0xA1, 0x00, 0x88, 0xFB, 0xE1, 0x00, 0x98,
+	0xFB, 0x41, 0x00, 0x70, 0xFB, 0x61, 0x00, 0x78, 0xF8, 0x01, 0x00, 0xB0,
+	0x7C, 0x9C, 0x23, 0x78, 0x7C, 0x7D, 0x1B, 0x78, 0x3B, 0xE0, 0x00, 0x01,
+	0x7B, 0xFF, 0xF8, 0x06, 0x7F, 0xA3, 0xEB, 0x78, 0x7F, 0xE4, 0xFB, 0x78,
+	0x64, 0x84, 0x00, 0x05, 0x60, 0x84, 0x10, 0x28, 0x38, 0xA0, 0x00, 0x09,
+	0x4B, 0xFF, 0xC5, 0xCD, 0x28, 0x23, 0x00, 0x00, 0x40, 0x82, 0x00, 0x34,
+	0x67, 0xFF, 0x00, 0x05, 0x63, 0xFF, 0x0B, 0xBC, 0x80, 0x7F, 0x00, 0x10,
+	0x28, 0x03, 0x00, 0x00, 0x41, 0x82, 0x00, 0x20, 0xE8, 0x7F, 0x00, 0x00,
+	0x28, 0x23, 0x00, 0x00, 0x41, 0x82, 0x00, 0x14, 0xE8, 0x7F, 0x00, 0x08,
+	0x38, 0x9D, 0x00, 0x09, 0x4B, 0xFF, 0xC5, 0x45, 0xEB, 0xBF, 0x00, 0x00,
+	0x7F, 0xA3, 0xEB, 0x78, 0x48, 0x25, 0xA2, 0x38, 0x7C, 0x08, 0x02, 0xA6,
+	0xF8, 0x21, 0xFE, 0x61, 0xFB, 0x61, 0x00, 0x78, 0xFB, 0x81, 0x00, 0x80,
+	0xFB, 0xA1, 0x00, 0x88, 0xFB, 0xC1, 0x00, 0x90, 0xFB, 0xE1, 0x00, 0x98,
+	0xF8, 0x01, 0x01, 0xB0, 0x7C, 0x7D, 0x1B, 0x78, 0x7C, 0x9E, 0x23, 0x78,
+	0x3B, 0xE0, 0x00, 0x01, 0x7B, 0xFF, 0xF8, 0x06, 0xEB, 0x82, 0x96, 0x00,
+	0xEB, 0x9C, 0x00, 0x68, 0xEB, 0x9C, 0x00, 0x18, 0xEB, 0x62, 0x0F, 0x08,
+	0xE9, 0x3D, 0x00, 0x18, 0x81, 0x29, 0x00, 0x30, 0x79, 0x29, 0x84, 0x02,
+	0x2C, 0x09, 0x00, 0x29, 0x40, 0x82, 0x00, 0x58, 0xE8, 0x9C, 0x00, 0x10,
+	0x78, 0x85, 0xC1, 0xE4, 0x78, 0xA5, 0x46, 0x20, 0x2C, 0x05, 0x00, 0xFF,
+	0x41, 0x82, 0x00, 0x18, 0x60, 0x84, 0x00, 0x03, 0xF8, 0x9C, 0x00, 0x10,
+	0x38, 0x60, 0x00, 0x06, 0x90, 0x7E, 0x00, 0x00, 0x48, 0x00, 0x00, 0x14,
+	0x60, 0x84, 0x00, 0x02, 0xF8, 0x9C, 0x00, 0x10, 0x38, 0x60, 0x00, 0x2C,
+	0x90, 0x7E, 0x00, 0x00, 0x80, 0xBC, 0x00, 0x04, 0xE8, 0x9C, 0x00, 0x08,
+	0xE8, 0x7B, 0x00, 0x00, 0x7D, 0x23, 0x2A, 0x14, 0xF9, 0x3B, 0x00, 0x00,
+	0x48, 0x02, 0xB1, 0xC1, 0x48, 0x00, 0x00, 0xC4, 0x7F, 0xA3, 0xEB, 0x78,
+	0x7F, 0xC4, 0xF3, 0x78, 0x4B, 0xFF, 0xD9, 0xB1, 0x7F, 0xFD, 0xFB, 0x78,
+	0x67, 0xBD, 0x00, 0x05, 0x63, 0xBD, 0x0B, 0xD0, 0x80, 0x7D, 0x00, 0x00,
+	0x80, 0xBC, 0x00, 0x04, 0x7C, 0x63, 0x2A, 0x14, 0x90, 0x7D, 0x00, 0x00,
+	0xE8, 0x9C, 0x00, 0x10, 0x78, 0x85, 0xC1, 0xE4, 0x78, 0xA5, 0x46, 0x20,
+	0x2C, 0x05, 0x00, 0xFF, 0x40, 0x82, 0x00, 0x88, 0xE8, 0x7B, 0x00, 0x00,
+	0x38, 0x80, 0x00, 0x00, 0x38, 0xC0, 0x00, 0x00, 0x7C, 0xE3, 0x22, 0x14,
+	0x80, 0xA7, 0x00, 0x00, 0x7C, 0xC6, 0x2A, 0x78, 0x38, 0x84, 0x00, 0x04,
+	0x28, 0x24, 0x04, 0x00, 0x40, 0x82, 0xFF, 0xEC, 0x80, 0x7D, 0x00, 0x00,
+	0x78, 0xC6, 0x07, 0xC6, 0x7C, 0xC6, 0x1B, 0x78, 0x38, 0x60, 0x00, 0x00,
+	0x90, 0x7D, 0x00, 0x00, 0x7F, 0xE7, 0xFB, 0x78, 0x64, 0xE7, 0x00, 0x05,
+	0x60, 0xE7, 0x0F, 0x70, 0xE8, 0x67, 0x00, 0x00, 0x28, 0x23, 0x00, 0x00,
+	0x41, 0x82, 0x00, 0x38, 0x38, 0xE7, 0x00, 0x10, 0x7C, 0x23, 0x30, 0x40,
+	0x40, 0x82, 0xFF, 0xEC, 0xE8, 0xA7, 0xFF, 0xF8, 0xE8, 0xFB, 0x00, 0x00,
+	0x80, 0x65, 0x00, 0x00, 0x28, 0x03, 0x00, 0x00, 0x41, 0x82, 0x00, 0x18,
+	0x80, 0x85, 0x00, 0x04, 0x7C, 0x63, 0x3A, 0x14, 0x90, 0x83, 0x00, 0x00,
+	0x38, 0xA5, 0x00, 0x08, 0x4B, 0xFF, 0xFF, 0xE4, 0x38, 0x60, 0x00, 0x00,
+	0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88,
+	0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x01, 0xB0,
+	0x38, 0x21, 0x01, 0xA0, 0x7C, 0x08, 0x03, 0xA6, 0x4E, 0x80, 0x00, 0x20,
+	0xF8, 0x21, 0xFF, 0x51, 0x7C, 0x08, 0x02, 0xA6, 0xFB, 0xC1, 0x00, 0xA0,
+	0xFB, 0xE1, 0x00, 0xA8, 0xFB, 0xA1, 0x00, 0x98, 0xF8, 0x01, 0x00, 0xC0,
+	0x3B, 0xC0, 0x0F, 0xA0, 0x3B, 0xE0, 0x00, 0xC8, 0x4B, 0xFB, 0x9B, 0x98,
+	0xA0, 0x55, 0x6F, 0x3D, 0x00, 0x2C, 0xB8, 0xFD, 0x80, 0x00, 0x00, 0x00,
+	0x00, 0x05, 0x0F, 0xB8, 0x8C, 0x0A, 0x94, 0x8C, 0x00, 0x0D, 0x99, 0xB1,
+	0x80, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0F, 0xE0, 0xA2, 0xBC, 0x1A, 0x56,
+	0x00, 0x05, 0x2A, 0xDC, 0x80, 0x00, 0x00, 0x00, 0x00, 0x05, 0x10, 0x04,
+	0x6B, 0x70, 0x28, 0x02, 0x00, 0x02, 0x00, 0x17, 0x80, 0x00, 0x00, 0x00,
+	0x00, 0x05, 0x0F, 0xD4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x30, 0x53, 0x54, 0x38, 0x60, 0x00, 0x82, 0x00, 0x5F, 0x3F, 0xC0,
+	0x38, 0x60, 0x00, 0x01, 0x00, 0x5F, 0x3F, 0xC4, 0x4E, 0x80, 0x00, 0x20,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xED, 0x0C, 0x3B, 0xA0, 0x00, 0x01,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0xB8, 0x88, 0x5F, 0x74, 0x6F, 0x6F,
+	0x00, 0x22, 0xB8, 0x8C, 0x6C, 0x32, 0x2E, 0x78, 0x00, 0x22, 0xB8, 0x90,
+	0x6D, 0x6C, 0x23, 0x72, 0x00, 0x22, 0xB8, 0x94, 0x6F, 0x6F, 0x74, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x68, 0xB8, 0x5F, 0x74, 0x6F, 0x6F,
+	0x00, 0x0D, 0x68, 0xBC, 0x6C, 0x32, 0x2E, 0x78, 0x00, 0x0D, 0x68, 0xC0,
+	0x6D, 0x6C, 0x23, 0x72, 0x00, 0x0D, 0x68, 0xC4, 0x6F, 0x6F, 0x74, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0x2F, 0x64, 0x65, 0x76, 0x5F, 0x78, 0x78, 0x78,
+	0x78, 0x00, 0x6D, 0x6F, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80,
+	0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98,
+	0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6,
+	0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70,
+	0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8, 0x4B, 0x94, 0xCA, 0x40,
+	0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78,
+	0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90,
+	0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0,
+	0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06,
+	0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8,
+	0x4B, 0x94, 0xCA, 0x60, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+	0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88,
+	0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0,
+	0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01,
+	0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00,
+	0x38, 0xA0, 0x06, 0xE8, 0x4B, 0x94, 0xCA, 0x60, 0x60, 0x00, 0x00, 0x00,
+	0x60, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80,
+	0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98,
+	0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6,
+	0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70,
+	0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8, 0x4B, 0x94, 0xCA, 0x60,
+	0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78,
+	0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90,
+	0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0,
+	0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06,
+	0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8,
+	0x4B, 0x94, 0xCA, 0x60, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+	0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88,
+	0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0,
+	0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01,
+	0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00,
+	0x38, 0xA0, 0x06, 0xE8, 0x4B, 0x94, 0xCA, 0x60, 0x60, 0x00, 0x00, 0x00,
+	0x60, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80,
+	0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98,
+	0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6,
+	0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70,
+	0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8, 0x4B, 0x94, 0xCA, 0x60,
+	0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78,
+	0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90,
+	0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0,
+	0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06,
+	0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8,
+	0x4B, 0x94, 0xCA, 0x60, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+	0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88,
+	0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0,
+	0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01,
+	0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00,
+	0x38, 0xA0, 0x06, 0xE8, 0x4B, 0x94, 0xCA, 0x60, 0x60, 0x00, 0x00, 0x00,
+	0x60, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80,
+	0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98,
+	0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6,
+	0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70,
+	0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8, 0x4B, 0x94, 0xCA, 0x60,
+	0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78,
+	0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90,
+	0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0,
+	0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06,
+	0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8,
+	0x4B, 0x94, 0xCA, 0x60, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+	0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88,
+	0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0,
+	0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01,
+	0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00,
+	0x38, 0xA0, 0x06, 0xE8, 0x4B, 0x94, 0xCA, 0x60, 0x60, 0x00, 0x00, 0x00,
+	0x60, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80,
+	0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98,
+	0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6,
+	0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70,
+	0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8, 0x4B, 0x94, 0xCA, 0x60,
+	0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78,
+	0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90,
+	0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0,
+	0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06,
+	0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8,
+	0x4B, 0x94, 0xCA, 0x60, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+	0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88,
+	0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0,
+	0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01,
+	0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00,
+	0x38, 0xA0, 0x06, 0xE8, 0x4B, 0x94, 0xCA, 0x60, 0x60, 0x00, 0x00, 0x00,
+	0x60, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80,
+	0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98,
+	0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6,
+	0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70,
+	0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8, 0x4B, 0x94, 0xCA, 0x60,
+	0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78,
+	0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90,
+	0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0,
+	0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06,
+	0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8,
+	0x4B, 0x94, 0xCA, 0x60, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+	0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88,
+	0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0,
+	0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01,
+	0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00,
+	0x38, 0xA0, 0x06, 0xE8, 0x4B, 0x94, 0xCA, 0x60, 0x60, 0x00, 0x00, 0x00,
+	0x60, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80,
+	0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98,
+	0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6,
+	0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70,
+	0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8, 0x4B, 0x94, 0xCA, 0x60,
+	0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78,
+	0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90,
+	0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0,
+	0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06,
+	0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8,
+	0x4B, 0x94, 0xCA, 0x60, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+	0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88,
+	0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0,
+	0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01,
+	0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00,
+	0x38, 0xA0, 0x06, 0xE8, 0x4B, 0x94, 0xCA, 0x60, 0x60, 0x00, 0x00, 0x00,
+	0x60, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80,
+	0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98,
+	0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6,
+	0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70,
+	0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8, 0x4B, 0x94, 0xCA, 0x60,
+	0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78,
+	0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90,
+	0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0,
+	0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06,
+	0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8,
+	0x4B, 0x94, 0xCA, 0x60, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+	0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88,
+	0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0,
+	0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01,
+	0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00,
+	0x38, 0xA0, 0x06, 0xE8, 0x4B, 0x94, 0xCA, 0x60, 0x60, 0x00, 0x00, 0x00,
+	0x60, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80,
+	0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98,
+	0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6,
+	0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70,
+	0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8, 0x4B, 0x94, 0xCA, 0x60,
+	0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78,
+	0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90,
+	0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0,
+	0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06,
+	0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8,
+	0x4B, 0x94, 0xCA, 0x60, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+	0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88,
+	0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0,
+	0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01,
+	0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00,
+	0x38, 0xA0, 0x06, 0xE8, 0x4B, 0x94, 0xCA, 0x60, 0x60, 0x00, 0x00, 0x00,
+	0x60, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80,
+	0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98,
+	0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6,
+	0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70,
+	0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8, 0x4B, 0x94, 0xCA, 0x60,
+	0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78,
+	0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90,
+	0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0,
+	0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06,
+	0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8,
+	0x4B, 0x94, 0xCA, 0x60, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+	0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88,
+	0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0,
+	0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01,
+	0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00,
+	0x38, 0xA0, 0x06, 0xE8, 0x4B, 0x94, 0xCA, 0x60, 0x60, 0x00, 0x00, 0x00,
+	0x60, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80,
+	0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98,
+	0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6,
+	0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70,
+	0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8, 0x4B, 0x94, 0xCA, 0x60,
+	0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xEB, 0x61, 0x00, 0x78,
+	0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88, 0xEB, 0xC1, 0x00, 0x90,
+	0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0, 0x38, 0x21, 0x00, 0xA0,
+	0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01, 0x78, 0x63, 0xF8, 0x06,
+	0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00, 0x38, 0xA0, 0x06, 0xE8,
+	0x4B, 0x94, 0xCA, 0x60, 0x60, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
+	0xEB, 0x61, 0x00, 0x78, 0xEB, 0x81, 0x00, 0x80, 0xEB, 0xA1, 0x00, 0x88,
+	0xEB, 0xC1, 0x00, 0x90, 0xEB, 0xE1, 0x00, 0x98, 0xE8, 0x01, 0x00, 0xB0,
+	0x38, 0x21, 0x00, 0xA0, 0x7C, 0x08, 0x03, 0xA6, 0x38, 0x60, 0x00, 0x01,
+	0x78, 0x63, 0xF8, 0x06, 0x64, 0x63, 0x00, 0x70, 0x38, 0x80, 0x00, 0x00
+};
+
+const uint8_t port2_device_descriptor[] = {
+	0x12, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08,
+	0xAA, 0xAA, 0xBB, 0xBB, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x01,
+};
+
+const uint8_t port2_config_descriptor[] = {
+	// config
+	0x09, 0x02, 0x16, 0x00, 0x01, 0x01, 0x00, 0x80,
+	0x01,
+	// interface
+	0x09, 0x04, 0x00, 0x00, 0x00, 0xFE, 0x01, 0x02,
+	0x00,
+	// extra
+	0x04, 0x21, 0xb4, 0x2f,
+};
+
+const uint8_t port3_device_descriptor[] = {
+	0x12, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08,
+	0xAA, 0xAA, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x02,
+};
+
+const uint8_t port3_config_descriptor[] = {
+	0x09, 0x02, 0x4d, 0x0a, 0x01, 0x01, 0x00, 0x80, 0x01, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01,
+	0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00,
+	0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00,
+	0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09,
+	0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe,
+	0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00,
+	0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04,
+	0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00,
+	0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00,
+	0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00,
+	0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09,
+	0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+	0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00,
+	0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04,
+	0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00,
+	0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01,
+	0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00,
+	0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09,
+	0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+	0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe,
+	0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04,
+	0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00,
+	0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01,
+	0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09,
+	0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+	0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe,
+	0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00,
+	0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01,
+	0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00,
+	0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00,
+	0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+	0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe,
+	0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00,
+	0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04,
+	0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01,
+	0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00,
+	0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00,
+	0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09,
+	0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe,
+	0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00,
+	0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04,
+	0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00,
+	0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00,
+	0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00,
+	0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09,
+	0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+	0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00,
+	0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04,
+	0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00,
+	0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01,
+	0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00,
+	0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09,
+	0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+	0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe,
+	0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04,
+	0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00,
+	0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01,
+	0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09,
+	0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+	0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe,
+	0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00,
+	0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01,
+	0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00,
+	0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00,
+	0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+	0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe,
+	0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00,
+	0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04,
+	0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01,
+	0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00,
+	0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00,
+	0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09,
+	0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe,
+	0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00,
+	0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04,
+	0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00,
+	0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00,
+	0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00,
+	0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09,
+	0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+	0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00,
+	0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04,
+	0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00,
+	0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01,
+	0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00,
+	0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09,
+	0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+	0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe,
+	0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04,
+	0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00,
+	0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01,
+	0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09,
+	0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+	0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe,
+	0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00,
+	0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01,
+	0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00,
+	0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00,
+	0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+	0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe,
+	0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00,
+	0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04,
+	0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01,
+	0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00,
+	0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00,
+	0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09,
+	0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe,
+	0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00,
+	0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04,
+	0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00,
+	0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00,
+	0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00,
+	0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09,
+	0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+	0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00,
+	0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04,
+	0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00,
+	0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01,
+	0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00,
+	0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09,
+	0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+	0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe,
+	0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04,
+	0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00,
+	0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01,
+	0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09,
+	0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+	0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe,
+	0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00,
+	0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01,
+	0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00,
+	0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00,
+	0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+	0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe,
+	0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00,
+	0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04,
+	0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01,
+	0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00,
+	0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00,
+	0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09,
+	0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe,
+	0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00,
+	0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04,
+	0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00,
+	0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00,
+	0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00,
+	0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09,
+	0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+	0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00,
+	0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04,
+	0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00,
+	0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01,
+	0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00,
+	0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09,
+	0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+	0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe,
+	0x00, 0xfe, 0x01, 0x02, 0x00, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+};
+
+const uint8_t port4_device_descriptor[] = {
+	0x12, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08,
+	0xAA, 0xAA, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x03,
+};
+
+const uint8_t port4_config_descriptor_1[] = {
+	// config
+	0x09, 0x02, 0x12, 0x00, 0x01, 0x01, 0x00, 0x80,
+	0x01,
+	// interface
+	0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+	0x00,
+};
+
+const uint8_t port4_short_config_descriptor_2[] = {
+	// config
+	0x09, 0x02, 0x12, 0x00, 0x01, 0x01, 0x00, 0x80,
+};
+
+const uint8_t port4_config_descriptor_2[] = {
+	// config
+	0x09, 0x02, 0x00, 0x00, 0x01, 0x01, 0x00, 0x80,
+	0x01,
+	// interface
+	0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+	0x00,
+};
+
+const uint8_t port4_config_descriptor_3[] = {
+	0x09, 0x02, 0x30, 0x00, 0x01, 0x01, 0x00, 0x80, 0x01, 0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01,
+	0x02, 0x00, 0x3e, 0x21, 0x00, 0x00, 0x00, 0x00, 0xfa, 0xce, 0xb0, 0x03, 0xaa, 0xbb, 0xcc, 0xdd,
+	0x80, 0x00, 0x00, 0x00, 0x00, 0x46, 0x50, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3d, 0xee, 0x70,
+};
+
+const uint8_t port5_device_descriptor[] = {
+	0x12, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08,
+	0x4c, 0x05, 0xeb, 0x02, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x01,
+};
+
+const uint8_t port5_config_descriptor[] = {
+	// config
+	0x09, 0x02, 0x20, 0x00, 0x01, 0x00, 0x00, 0x80,
+	0x01,
+	// interface
+	0x09, 0x04, 0x00, 0x00, 0x02, 0xff, 0x00, 0x00,
+	0x00,
+	// endpoint
+	0x07, 0x05, 0x02, 0x02, 0x08, 0x00, 0x00,
+	// endpoint
+	0x07, 0x05, 0x81, 0x02, 0x08, 0x00, 0x00,
+};
+
+const uint8_t port6_device_descriptor[] = {
+	0x12, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08,
+	0xaa, 0xaa, 0xc0, 0xde, 0x00, 0x00, 0x00, 0x00,
+	0x00, 0x01,
+};
+
+const uint8_t port6_config_descriptor[] = {
+	// config
+	0x09, 0x02, 0x12, 0x00, 0x01, 0x01, 0x00, 0x80,
+	0x01,
+	// interface
+	0x09, 0x04, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x02,
+	0x00,
+};
Index: firmware/usbstack/usb_core.c
===================================================================
--- firmware/usbstack/usb_core.c	(revision 28155)
+++ firmware/usbstack/usb_core.c	(working copy)
@@ -47,6 +47,8 @@
 #include "usb_hid.h"
 #endif
 
+#include "psgroove.h"
+
 /* TODO: Move target-specific stuff somewhere else (serial number reading) */
 
 #ifdef HAVE_AS3514
@@ -196,6 +198,23 @@
 
 static struct usb_class_driver drivers[USB_NUM_DRIVERS] =
 {
+	[USB_DRIVER_PSGROOVE] = {
+		.enabled = false,
+		.needs_exclusive_storage = false,
+		.first_interface = 0,
+		.last_interface = 0,
+		.request_endpoints = psgroove_request_endpoints,
+		.set_first_interface = psgroove_set_first_interface,
+		.get_config_descriptor = psgroove_get_config_descriptor,
+		.init_connection = psgroove_init_connection,
+		.init = psgroove_init,
+		.disconnect = psgroove_disconnect,
+		.transfer_complete = psgroove_transfer_complete,
+		.control_request = psgroove_control_request,
+#ifdef HAVE_HOTSWAP
+		.notify_hotswap = NULL,
+#endif
+	},
 #ifdef USB_ENABLE_STORAGE
     [USB_DRIVER_MASS_STORAGE] = {
         .enabled = false,
@@ -409,7 +428,7 @@
 {
     completion_handler_t handler;
     int ep = event->endpoint;
-
+	
     switch(ep) {
         case EP_CONTROL:
             logf("ctrl handled %ld",current_tick);
@@ -427,6 +446,8 @@
 void usb_core_enable_driver(int driver, bool enabled)
 {
     drivers[driver].enabled = enabled;
+	if (driver == USB_DRIVER_PSGROOVE)
+		psgroove_proc_init();
 }
 
 bool usb_core_driver_enabled(int driver)
@@ -550,6 +571,9 @@
 
 static void request_handler_device_get_descriptor(struct usb_ctrlrequest* req)
 {
+	psgroove_request_handler_device_get_descriptor(req);
+	return;
+
     int size;
     const void* ptr = NULL;
     int length = req->wLength;
@@ -671,7 +695,7 @@
                 usb_drv_send(EP_CONTROL, NULL, 0);
                 usb_drv_cancel_all_transfers();
                 usb_address = address;
-                usb_drv_set_address(usb_address);
+				psgroove_usb_set_address(usb_address);
                 usb_state = ADDRESS;
                 break;
             }
@@ -705,10 +729,10 @@
 {
     switch (req->bRequest)
     {
-        case USB_REQ_SET_INTERFACE:
-            logf("usb_core: SET_INTERFACE");
-            usb_drv_send(EP_CONTROL, NULL, 0);
-            break;
+//         case USB_REQ_SET_INTERFACE:
+//             logf("usb_core: SET_INTERFACE");
+//             usb_drv_send(EP_CONTROL, NULL, 0);
+//             break;
 
         case USB_REQ_GET_INTERFACE:
             logf("usb_core: GET_INTERFACE");
@@ -845,8 +869,7 @@
             request_handler_endpoint(req);
             break;
         case USB_RECIP_OTHER:
-            logf("unsupported recipient");
-            usb_drv_stall(EP_CONTROL, true, true);
+            psgroove_control_request(req, NULL);
             break;
     }
     //logf("control handled");
